{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Welcome to P@nicRoom\u2019s Documentation Usage This page contains a technical explanation for the inner workings of the Game. If you are looking for the Encyclopedia of Game-elements, click here! Overview P@tnicRoom uses the Godot 3 Engine and is written in their own Scriptlanguage . Framework The fundamental processes of the Game are managed by the following Classes: Name Usage Democr ECS getting and setting values of Game ELements Sokra TILES parses and organices the Tilemap Aris PROCGEN es WIP Dav IN ci executes input by its context A LEC andria instanciates Game Elements from LEC-files","title":"Welcome to P@nicRoom\u2019s Documentation"},{"location":"#welcome-to-pnicrooms-documentation","text":"","title":"Welcome to P@nicRoom\u2019s Documentation"},{"location":"#usage","text":"This page contains a technical explanation for the inner workings of the Game. If you are looking for the Encyclopedia of Game-elements, click here!","title":"Usage"},{"location":"#overview","text":"P@tnicRoom uses the Godot 3 Engine and is written in their own Scriptlanguage .","title":"Overview"},{"location":"#framework","text":"The fundamental processes of the Game are managed by the following Classes: Name Usage Democr ECS getting and setting values of Game ELements Sokra TILES parses and organices the Tilemap Aris PROCGEN es WIP Dav IN ci executes input by its context A LEC andria instanciates Game Elements from LEC-files","title":"Framework"},{"location":"cogsmosOverview/","text":"aLECandria sokraTILES arisPROCGENes democrECS heGEL kANt mARx descARtes Runtime Parameter Ancient Engines Introduction A good core of our development happens in our four Frameworks for gameplay, named after ancient Philosopher just because i like Gnosis and bad puns. This is just a small introduction to their main usage and to give an Idea of their inner workings. DioJSONes for storage Gamedata Named after Diogenes of sinope,the cynic.Which means \"doglike\" in a litteral sense, he was an \"odd\" Philosopher who represented a simple live. just like his simple live, we want to give our content designer a comfortable time to designs actual elements while the other two of us are coding rules and logic. it services as a structured folder with JSON-files with some conventions and even some Keywords which will be interpreted to special functions like a random number generator by writing \" (RANGE) 3W20+5\" for example. The most important point is its dynamic constructor,its my try on a compromise on the easy but lacking in logic of Mark-up-languages and the broad possibillities of the scripting-language of Godot,which therefore needs at least a basic level of experience in software development. you can look up \"\" or even \"\" for more Informations to this Idea :) SokraTILEs for graphical Tilemap Which person is more suited for rendering the world and its inhabitants,than the man who also question them by their allegory of the cave. We had some hard choices to make,on the one hand: we want to develop whereever the road takes us,so an abstract Map like dwarf fortress would be usefull.On the other hand,we also want to give as much people as possible to at least try out our,so this kind of artstyle is exactly the hardest to get. SokraTILEs is a weird lovechild of both worlds,highly recycling its assets but still with a grip in a visually pleasing world. it also uses the Tiled!-editor what means there are plenty of ways to mod each tile and even to draw your own maps. The Tileset can be dynamicly appended by just drawing them on a separate PNG , adding properties in Tiled and dragging and dropping them into the corresponding folder DemocrECTS for procedural/modular Game-elements Democretus lived around 400 BC and got a weird idea: \"what if every we can precive is made out such tiny things we can not physically see\". His take on atomism was mindblowing for his time,so it would make sense to use its idea for our ECS. long story short: an ECS is a special type of saving data which makes them so barebones and independent,it can be combined with another to get new symbiotic effects. just like atoms,they are so abstract that they are not splittable any further. this,ecspecially in combination to the other three frameworks,we can design possible interactions,whether than actual scenes.there is a highly likely chance you will discover something in your playthrough we did not even know, not even intendend to implement. AresPROCGENes for procedural/modular Game-elements if DemocrECTS enables the small but weird Items you can carry and spells you can cast, AresPROCGENes does the heavy lifting to amp it up to an entropic eleven.It manages the generation of the 100x100 Area where you move,fills it with interesting buildings and persons, and gives you new intereseting challenges on the next one.","title":"cogsmosOverview"},{"location":"cogsmosOverview/#ancient-engines","text":"","title":"Ancient Engines"},{"location":"cogsmosOverview/#introduction","text":"A good core of our development happens in our four Frameworks for gameplay, named after ancient Philosopher just because i like Gnosis and bad puns. This is just a small introduction to their main usage and to give an Idea of their inner workings.","title":"Introduction"},{"location":"cogsmosOverview/#diojsones-for-storage-gamedata","text":"Named after Diogenes of sinope,the cynic.Which means \"doglike\" in a litteral sense, he was an \"odd\" Philosopher who represented a simple live. just like his simple live, we want to give our content designer a comfortable time to designs actual elements while the other two of us are coding rules and logic. it services as a structured folder with JSON-files with some conventions and even some Keywords which will be interpreted to special functions like a random number generator by writing \" (RANGE) 3W20+5\" for example. The most important point is its dynamic constructor,its my try on a compromise on the easy but lacking in logic of Mark-up-languages and the broad possibillities of the scripting-language of Godot,which therefore needs at least a basic level of experience in software development. you can look up \"\" or even \"\" for more Informations to this Idea :)","title":"DioJSONes for storage Gamedata"},{"location":"cogsmosOverview/#sokratiles-for-graphical-tilemap","text":"Which person is more suited for rendering the world and its inhabitants,than the man who also question them by their allegory of the cave. We had some hard choices to make,on the one hand: we want to develop whereever the road takes us,so an abstract Map like dwarf fortress would be usefull.On the other hand,we also want to give as much people as possible to at least try out our,so this kind of artstyle is exactly the hardest to get. SokraTILEs is a weird lovechild of both worlds,highly recycling its assets but still with a grip in a visually pleasing world. it also uses the Tiled!-editor what means there are plenty of ways to mod each tile and even to draw your own maps. The Tileset can be dynamicly appended by just drawing them on a separate PNG , adding properties in Tiled and dragging and dropping them into the corresponding folder","title":"SokraTILEs for graphical Tilemap"},{"location":"cogsmosOverview/#democrects-for-proceduralmodular-game-elements","text":"Democretus lived around 400 BC and got a weird idea: \"what if every we can precive is made out such tiny things we can not physically see\". His take on atomism was mindblowing for his time,so it would make sense to use its idea for our ECS. long story short: an ECS is a special type of saving data which makes them so barebones and independent,it can be combined with another to get new symbiotic effects. just like atoms,they are so abstract that they are not splittable any further. this,ecspecially in combination to the other three frameworks,we can design possible interactions,whether than actual scenes.there is a highly likely chance you will discover something in your playthrough we did not even know, not even intendend to implement.","title":"DemocrECTS for procedural/modular Game-elements"},{"location":"cogsmosOverview/#aresprocgenes-for-proceduralmodular-game-elements","text":"if DemocrECTS enables the small but weird Items you can carry and spells you can cast, AresPROCGENes does the heavy lifting to amp it up to an entropic eleven.It manages the generation of the 100x100 Area where you move,fills it with interesting buildings and persons, and gives you new intereseting challenges on the next one.","title":"AresPROCGENes for procedural/modular Game-elements"},{"location":"tags/","text":"Tags Following is a list of relevant tags: [TAGS] - test","title":"Tags"},{"location":"tags/#tags","text":"Following is a list of relevant tags: [TAGS] - test","title":"Tags"},{"location":"Cogsmos/aLECandria/","text":"WORK IN PROGRESS","title":"WORK IN PROGRESS"},{"location":"Cogsmos/aLECandria/#work-in-progress","text":"","title":"WORK IN PROGRESS"},{"location":"Cogsmos/arisPROCGENes/","text":"WORK IN PROGRESS","title":"arisPROCGENes"},{"location":"Cogsmos/arisPROCGENes/#work-in-progress","text":"","title":"WORK IN PROGRESS"},{"location":"Cogsmos/sokraTILES/","text":"WORK IN PROGRESS","title":"sokraTILES"},{"location":"Cogsmos/sokraTILES/#work-in-progress","text":"","title":"WORK IN PROGRESS"},{"location":"Cogsmos/democrECS/Component/","text":"Introduction Components are Container for values and are conventionaliced by a on startup declared dictionary. Variables Name Datatype Notation owner Dictionary Map of all Components indexName:instance name Dictionary Map of all TemplateEntities indexName:atlasReference Adding new Components each context for values (like healthpoints or description) is a child of this Class. The Childclasses are collected in GameSrc/PatnicRoom/Components . Its Classname must be C_X_NAME where X stands for a free number in the list of enumerated. The Class also have to be added into the Hashmap of GameSrc/PatnicRoom/Indexes/Entity-Attributes/Components.gd Here our Template: extends Component class_name C_0_DESCRIPTION var value: String func _init(valuePara:String): self.name = \"C_0_DESCRIPTION\" value = valuePara static func name_quack() -> String : return \"C_0_DESCRIPTION\" static func dioJSONType_quack() -> String : return \"STRING\" static func getAutoDoc() -> Dictionary: return{ \"suggestion\" : \"Something offensive or hyperbolic, best case both\", \"description\" : \"Is shown to the player in things like mousehover or onlook-action\", \"validInputs\" : [], \"validType\" : dioJSONType_quack(), \"nameToShow\" : \"Description\", }","title":"Component"},{"location":"Cogsmos/democrECS/Component/#introduction","text":"Components are Container for values and are conventionaliced by a on startup declared dictionary.","title":"Introduction"},{"location":"Cogsmos/democrECS/Component/#variables","text":"","title":"Variables"},{"location":"Cogsmos/democrECS/Component/#adding-new-components","text":"each context for values (like healthpoints or description) is a child of this Class. The Childclasses are collected in GameSrc/PatnicRoom/Components . Its Classname must be C_X_NAME where X stands for a free number in the list of enumerated. The Class also have to be added into the Hashmap of GameSrc/PatnicRoom/Indexes/Entity-Attributes/Components.gd","title":"Adding new Components"},{"location":"Cogsmos/democrECS/Component/#_1","text":"Here our Template: extends Component class_name C_0_DESCRIPTION var value: String func _init(valuePara:String): self.name = \"C_0_DESCRIPTION\" value = valuePara static func name_quack() -> String : return \"C_0_DESCRIPTION\" static func dioJSONType_quack() -> String : return \"STRING\" static func getAutoDoc() -> Dictionary: return{ \"suggestion\" : \"Something offensive or hyperbolic, best case both\", \"description\" : \"Is shown to the player in things like mousehover or onlook-action\", \"validInputs\" : [], \"validType\" : dioJSONType_quack(), \"nameToShow\" : \"Description\", }","title":""},{"location":"Cogsmos/democrECS/Entity/","text":"Introduction Entities are a pillar in our gamedesign, almost every Item, Actor or obstacle can be tracked back to this class. broken down,they are just a collection of diffrent lists which contains the defining values of the game-element and references to other Entities which are in some relation to them. Variables Name Datatype Notation dictOfComps Dictionary Map of all Components indexName:instance dictOfTemplates Dictionary Map of all TemplateEntities indexName:atlasReference arrOfFlags Array List of all enumNumbers arrOfProperty Array list of all enumNumbers arrOfConds Array list of all influencing Conditions Functions function Return type Notation getComp(compIndex) Component returns the instance of Component getCompTemp(tempIndex,compIndex) Component returns the instance of Component getCompValue(compIndex) ???? returns the value of Component getCompTempValue(tempIndex,compIndex) ???? returns the value of Component addComponent(Component) void adds new Component into Map removeComponent(compIndex) void removes corresponding Component addTemplate(tempIndex,Template) void adds new Template into Map addFlag(enumNumber) void adds Flag to Entity addProperty(enumNumber) void adds Property to Entity removeProperty(enumNumber) void removes property from Entity removeFlag(enumNumber) void removes Flag from Entity hasProperty(enumNumber) Boolean returns if Entity has Property hasCond(condIndex) Boolean returns if Entity has Condition has(compIndex) Boolean returns if Entity has Component hasFlag(enumNumber) Boolean returns if Entity has Flag Specific Entities We have categoriced diffrent Types of Gameobjects into Children of this class! They add much readabillity and quality of live by providing proxy-functions to the lowest common anomminator: * Tiles * Interactables * Actors * KitParts * KitSets","title":"Entitiy"},{"location":"Cogsmos/democrECS/Entity/#introduction","text":"Entities are a pillar in our gamedesign, almost every Item, Actor or obstacle can be tracked back to this class. broken down,they are just a collection of diffrent lists which contains the defining values of the game-element and references to other Entities which are in some relation to them.","title":"Introduction"},{"location":"Cogsmos/democrECS/Entity/#variables","text":"","title":"Variables"},{"location":"Cogsmos/democrECS/Entity/#functions","text":"","title":"Functions"},{"location":"Cogsmos/democrECS/Entity/#specific-entities","text":"We have categoriced diffrent Types of Gameobjects into Children of this class! They add much readabillity and quality of live by providing proxy-functions to the lowest common anomminator: * Tiles * Interactables * Actors * KitParts * KitSets","title":"Specific Entities"},{"location":"Cogsmos/democrECS/Overview/","text":"democrECS Introduction This part of the Framework is responsible to save and declare attributes of game elements. \"democrECS\" may ring a bell by some readers, the \"ECS\" is commonly used for highly modular game elements. In addition, we implemented Templates as flyweight pattern. Here is a short summary of the Structure: E ntity : An Object with Hashmaps of Components, overall composing a game element C omponent : A container for a value, standardiced by its name T emplat : A set of components which are commonly shared S ystem : A plugable module of functions which modify, create or delete Entities Personal changes to the design functioncalls for variable-references due to readabillity, we choose to append Entities by proxy-like functions. Every advanced Entity has some lowest common anominator (for example every TileEntity has the Component C_1_IS_WALKABLE ). var isWalkable = tileToWalkOn.isWalkable();","title":"Overview"},{"location":"Cogsmos/democrECS/Overview/#democrecs","text":"","title":"democrECS"},{"location":"Cogsmos/democrECS/Overview/#introduction","text":"This part of the Framework is responsible to save and declare attributes of game elements. \"democrECS\" may ring a bell by some readers, the \"ECS\" is commonly used for highly modular game elements. In addition, we implemented Templates as flyweight pattern. Here is a short summary of the Structure: E ntity : An Object with Hashmaps of Components, overall composing a game element C omponent : A container for a value, standardiced by its name T emplat : A set of components which are commonly shared S ystem : A plugable module of functions which modify, create or delete Entities","title":"Introduction"},{"location":"Cogsmos/democrECS/Overview/#personal-changes-to-the-design","text":"","title":"Personal changes to the design"},{"location":"Cogsmos/democrECS/Overview/#functioncalls-for-variable-references","text":"due to readabillity, we choose to append Entities by proxy-like functions. Every advanced Entity has some lowest common anominator (for example every TileEntity has the Component C_1_IS_WALKABLE ). var isWalkable = tileToWalkOn.isWalkable();","title":"functioncalls for variable-references"},{"location":"Cogsmos/democrECS/System/","text":"WORK IN PROGRESS","title":"System"},{"location":"Cogsmos/democrECS/System/#work-in-progress","text":"","title":"WORK IN PROGRESS"},{"location":"Cogsmos/democrECS/Template/","text":"WORK IN PROGRESS","title":"Template"},{"location":"Cogsmos/democrECS/Template/#work-in-progress","text":"","title":"WORK IN PROGRESS"},{"location":"Conventions/Enums/","text":"BASE_GAME_DATA_PATH res://Gamedata/Game elements BASE_GAME_STABLE_DATA_PATH res://Gamedata/Game elements/Stable BASE_GAME_COMMUNITY_DATA_PATH res://Gamedata/Game elements/Community BASE_GAME_PERSONAL_DATA_PATH res://Gamedata/Game elements/Personal FILEPATH_GAMEDATA_TILESETS res://Gamedata/Tiled/TileSets/JSON TYPES_ON_MAP TILE ACTOR INTERACT MARKER PLAYER LOOT_SOURCE ACTION_PHASE EFFECT_DONE PLAYER_DONE NPC_DONE M_TYPE MEAT MAGIC MATRIX CENTER_TO_DRAW X: 32 Y: 31 TILE_PIXEL_SIZE 16 MOUSE_INPUT_MODE ONLOOK LOOT DIRECTION_FOUR NORTH EAST SOUTH WEST LAYER ACTOR PLAYER MEAT_GROUND MEAT_INTERACTABLE MATRIX_GROUND MATRIX_INTERACTABLE MAGIC_GROUND MAGIC_INTERACTABLE SELECTION CONDITION ENTROPY_TO_STRING Masterfully crafted Clockwork Tide up Manageable Mess Pigstall Chaotic Left for good Tipping point Spiraling out!! TRUE COSMIC VACUUM PROGRESS_COLOR 97a4c3 97a4c3 a7a7a7 a7a7a7 e7cd7b e7cd7b db6322 db6322 db2222 ff0e0e VALUE DREK WORN_OUT DO_IT_YOURSELF WAGESLAVE INDUSTRIAL UPPER_CLASS FEDERAL FIXER ELITE_RUNNER MEGACON_PROTOTYPE RARITY_TO_STRING Drek standard Worn out standard Do it yourself standard Wageslave standard Industrial standard Upper class standard Federal standard Fixer standard Elite runner standard Megacon prototype standard PARTS BASE MOD APPENDIX CAT_MATRIX HACK DRONE CYBERWARE CAT_MAGIC RITE SPELL INFUSION CAT_MEAT GUN MEELE ARMOR CATEGORY HACK DRONE CYBERWARE RITE SPELL INFUSION GUN MEELE ARMOR STATION_MODE ADD REMOVE CHANGE PEACES_TILL_NEW_SLOT 4 MAX_TEAM_SIZE 4 SKILL CRAFTING PHYLOSOPHIZING CONCEPTUALICING PERCEVING ASSENSING DEBUGGING ENDURING COPING FILTERING SNEAKING REPRESSING SILENCING ROOMS_FOR_TRAIT_NEEDED 3 MOVEMENT NORTH WEST SOUTH EAST INTERFACE CNTL DELETE ESCAPE ENTER LEFT_CLICK RIGHT_CLICK ACTION SELECT INTERACT PARCTISE ONLOOK LOOT USE INFO JURNAL MONITOR NEWS KITS CLI PLAYER_STATE STANDING SELECTING NEEDING_DIRECTION SELECTING_DIRECTION INVALID FINISHED INPUT_MODE MOUSE KEY INPUT_MODE MOUSE KEY SELF INVENTORY CHAR ROOTNET STATION WORKSHOP TERMINAL RETREAT SPECIAL PANIC SCREEN_TYPE STATION SELF SPECIAL VALUE_DEPTH UPPER MIDDLE LOWER CONNECTOR CONDITION VALUE EXCEPTIONAL_PARSER DEFAULT AND FLAG HAS_COMP COMPARE_COMP PERMANENT_CHANGE TYPES_METADATA TYPES_METADATA TILE_SETS res://Gamedata/Tiled/TileSets/JSON GAME_ELEMENTS_STABLE res://Gamedata/Game elements/Stable GAME_ELEMENTS_COMMUNITY res://Gamedata/Game elements/Community GAME_ELEMENTS_PERSONAL res://Gamedata/Game elements/Personal SAVE_STATE res://Config/savestate SCENE TITLE REST PANIC LEC_VIEWER SUB_TITLES res://Config/dynamic subtitles.json GOALS FIGHT IDLE MEANS SELECT_TARGET SELECT_KIT ACTIONS SELECT_TILE SELECT_ACTOR SELECT_SELF SELECT_KIT_BY_CAT SELECT_KIT_BY_NAME SELECT_KIT_BY_SLOT_NR SELECT_KIT_BY_RNG SELECT_KIT_IN_REACH","title":"Enums"},{"location":"Conventions/Enums/#base_game_data_path","text":"res://Gamedata/Game elements","title":"BASE_GAME_DATA_PATH"},{"location":"Conventions/Enums/#base_game_stable_data_path","text":"res://Gamedata/Game elements/Stable","title":"BASE_GAME_STABLE_DATA_PATH"},{"location":"Conventions/Enums/#base_game_community_data_path","text":"res://Gamedata/Game elements/Community","title":"BASE_GAME_COMMUNITY_DATA_PATH"},{"location":"Conventions/Enums/#base_game_personal_data_path","text":"res://Gamedata/Game elements/Personal","title":"BASE_GAME_PERSONAL_DATA_PATH"},{"location":"Conventions/Enums/#filepath_gamedata_tilesets","text":"res://Gamedata/Tiled/TileSets/JSON","title":"FILEPATH_GAMEDATA_TILESETS"},{"location":"Conventions/Enums/#types_on_map","text":"TILE ACTOR INTERACT MARKER PLAYER LOOT_SOURCE","title":"TYPES_ON_MAP"},{"location":"Conventions/Enums/#action_phase","text":"EFFECT_DONE PLAYER_DONE NPC_DONE","title":"ACTION_PHASE"},{"location":"Conventions/Enums/#m_type","text":"MEAT MAGIC MATRIX","title":"M_TYPE"},{"location":"Conventions/Enums/#center_to_draw","text":"X: 32 Y: 31","title":"CENTER_TO_DRAW"},{"location":"Conventions/Enums/#tile_pixel_size","text":"16","title":"TILE_PIXEL_SIZE"},{"location":"Conventions/Enums/#mouse_input_mode","text":"ONLOOK LOOT","title":"MOUSE_INPUT_MODE"},{"location":"Conventions/Enums/#direction_four","text":"NORTH EAST SOUTH WEST","title":"DIRECTION_FOUR"},{"location":"Conventions/Enums/#layer","text":"ACTOR PLAYER MEAT_GROUND MEAT_INTERACTABLE MATRIX_GROUND MATRIX_INTERACTABLE MAGIC_GROUND MAGIC_INTERACTABLE SELECTION CONDITION","title":"LAYER"},{"location":"Conventions/Enums/#entropy_to_string","text":"Masterfully crafted Clockwork Tide up Manageable Mess Pigstall Chaotic Left for good Tipping point Spiraling out!! TRUE COSMIC VACUUM","title":"ENTROPY_TO_STRING"},{"location":"Conventions/Enums/#progress_color","text":"","title":"PROGRESS_COLOR"},{"location":"Conventions/Enums/#97a4c3","text":"","title":"97a4c3"},{"location":"Conventions/Enums/#97a4c3_1","text":"","title":"97a4c3"},{"location":"Conventions/Enums/#a7a7a7","text":"","title":"a7a7a7"},{"location":"Conventions/Enums/#a7a7a7_1","text":"","title":"a7a7a7"},{"location":"Conventions/Enums/#e7cd7b","text":"","title":"e7cd7b"},{"location":"Conventions/Enums/#e7cd7b_1","text":"","title":"e7cd7b"},{"location":"Conventions/Enums/#db6322","text":"","title":"db6322"},{"location":"Conventions/Enums/#db6322_1","text":"","title":"db6322"},{"location":"Conventions/Enums/#db2222","text":"","title":"db2222"},{"location":"Conventions/Enums/#ff0e0e","text":"","title":"ff0e0e"},{"location":"Conventions/Enums/#value","text":"DREK WORN_OUT DO_IT_YOURSELF WAGESLAVE INDUSTRIAL UPPER_CLASS FEDERAL FIXER ELITE_RUNNER MEGACON_PROTOTYPE","title":"VALUE"},{"location":"Conventions/Enums/#rarity_to_string","text":"Drek standard Worn out standard Do it yourself standard Wageslave standard Industrial standard Upper class standard Federal standard Fixer standard Elite runner standard Megacon prototype standard","title":"RARITY_TO_STRING"},{"location":"Conventions/Enums/#parts","text":"BASE MOD APPENDIX","title":"PARTS"},{"location":"Conventions/Enums/#cat_matrix","text":"HACK DRONE CYBERWARE","title":"CAT_MATRIX"},{"location":"Conventions/Enums/#cat_magic","text":"RITE SPELL INFUSION","title":"CAT_MAGIC"},{"location":"Conventions/Enums/#cat_meat","text":"GUN MEELE ARMOR","title":"CAT_MEAT"},{"location":"Conventions/Enums/#category","text":"HACK DRONE CYBERWARE RITE SPELL INFUSION GUN MEELE ARMOR","title":"CATEGORY"},{"location":"Conventions/Enums/#station_mode","text":"ADD REMOVE CHANGE","title":"STATION_MODE"},{"location":"Conventions/Enums/#peaces_till_new_slot","text":"4","title":"PEACES_TILL_NEW_SLOT"},{"location":"Conventions/Enums/#MAX_TEAM_SIZE","text":"4","title":"MAX_TEAM_SIZE"},{"location":"Conventions/Enums/#skill","text":"CRAFTING PHYLOSOPHIZING CONCEPTUALICING PERCEVING ASSENSING DEBUGGING ENDURING COPING FILTERING SNEAKING REPRESSING SILENCING","title":"SKILL"},{"location":"Conventions/Enums/#rooms_for_trait_needed","text":"3","title":"ROOMS_FOR_TRAIT_NEEDED"},{"location":"Conventions/Enums/#movement","text":"NORTH WEST SOUTH EAST","title":"MOVEMENT"},{"location":"Conventions/Enums/#interface","text":"CNTL DELETE ESCAPE ENTER LEFT_CLICK RIGHT_CLICK","title":"INTERFACE"},{"location":"Conventions/Enums/#action","text":"SELECT INTERACT PARCTISE ONLOOK LOOT USE","title":"ACTION"},{"location":"Conventions/Enums/#info","text":"JURNAL MONITOR NEWS KITS CLI","title":"INFO"},{"location":"Conventions/Enums/#player_state","text":"STANDING SELECTING NEEDING_DIRECTION SELECTING_DIRECTION INVALID FINISHED","title":"PLAYER_STATE"},{"location":"Conventions/Enums/#input_mode","text":"MOUSE KEY","title":"INPUT_MODE"},{"location":"Conventions/Enums/#input_mode_1","text":"MOUSE KEY","title":"INPUT_MODE"},{"location":"Conventions/Enums/#self","text":"INVENTORY CHAR ROOTNET","title":"SELF"},{"location":"Conventions/Enums/#station","text":"WORKSHOP TERMINAL RETREAT","title":"STATION"},{"location":"Conventions/Enums/#special","text":"PANIC","title":"SPECIAL"},{"location":"Conventions/Enums/#screen_type","text":"STATION SELF SPECIAL","title":"SCREEN_TYPE"},{"location":"Conventions/Enums/#value_depth","text":"UPPER MIDDLE LOWER CONNECTOR CONDITION VALUE","title":"VALUE_DEPTH"},{"location":"Conventions/Enums/#exceptional_parser","text":"DEFAULT AND FLAG HAS_COMP COMPARE_COMP PERMANENT_CHANGE","title":"EXCEPTIONAL_PARSER"},{"location":"Conventions/Enums/#types_metadata","text":"TYPES_METADATA","title":"TYPES_METADATA"},{"location":"Conventions/Enums/#tile_sets","text":"res://Gamedata/Tiled/TileSets/JSON","title":"TILE_SETS"},{"location":"Conventions/Enums/#game_elements_stable","text":"res://Gamedata/Game elements/Stable","title":"GAME_ELEMENTS_STABLE"},{"location":"Conventions/Enums/#game_elements_community","text":"res://Gamedata/Game elements/Community","title":"GAME_ELEMENTS_COMMUNITY"},{"location":"Conventions/Enums/#game_elements_personal","text":"res://Gamedata/Game elements/Personal","title":"GAME_ELEMENTS_PERSONAL"},{"location":"Conventions/Enums/#save_state","text":"res://Config/savestate","title":"SAVE_STATE"},{"location":"Conventions/Enums/#scene","text":"TITLE REST PANIC LEC_VIEWER","title":"SCENE"},{"location":"Conventions/Enums/#sub_titles","text":"res://Config/dynamic subtitles.json","title":"SUB_TITLES"},{"location":"Conventions/Enums/#goals","text":"FIGHT IDLE","title":"GOALS"},{"location":"Conventions/Enums/#means","text":"SELECT_TARGET SELECT_KIT","title":"MEANS"},{"location":"Conventions/Enums/#actions","text":"SELECT_TILE SELECT_ACTOR SELECT_SELF SELECT_KIT_BY_CAT SELECT_KIT_BY_NAME SELECT_KIT_BY_SLOT_NR SELECT_KIT_BY_RNG SELECT_KIT_IN_REACH","title":"ACTIONS"},{"location":"Conventions/Namings/","text":"","title":"Namings"},{"location":"Conventions/Styling/","text":"Styleguide General we use for variables camelCaseLikeThisForExample private variables start with an underscore to \"hide\" them in _functioncalls() we use static typing as much as possible for a declaration,we set a blankspace in front of the Datatype: var number: int for Parameters in functions,we cramp them together: func foo(add:int,print:String): for Arrays and Dictionaries,we dont type them when we set their equal: var toPrint = [] however there are times where we want to stay in dynamic Typing. We use a hybrid to to duckType, ecspecially at diffrent kinds of entites. you can guess that parameters or variables which are named like \"ent\" use a fluid Class instance. And to my pardon,you need to do this until GD-Script can declare Interfaces ( hints would be appreciated,guys I really want some Interfaces D; )","title":"Styling"},{"location":"Conventions/Styling/#styleguide","text":"","title":"Styleguide"},{"location":"Conventions/Styling/#general","text":"we use for variables camelCaseLikeThisForExample private variables start with an underscore to \"hide\" them in _functioncalls() we use static typing as much as possible for a declaration,we set a blankspace in front of the Datatype: var number: int for Parameters in functions,we cramp them together: func foo(add:int,print:String): for Arrays and Dictionaries,we dont type them when we set their equal: var toPrint = [] however there are times where we want to stay in dynamic Typing. We use a hybrid to to duckType, ecspecially at diffrent kinds of entites. you can guess that parameters or variables which are named like \"ent\" use a fluid Class instance. And to my pardon,you need to do this until GD-Script can declare Interfaces ( hints would be appreciated,guys I really want some Interfaces D; )","title":"General"},{"location":"Conventions/moduleStructure/","text":"Modules My Project structure follows an Systemic design pilosophy, its goal is toappend new themes of Features as an Module-folder,which acts like a Blackbox. The only Accespoint is their SIngleton API which saniticies, validates or logs if neccessary. Here are the conversioned Namespaces and their Usage: |Namespace | Usage | |----------------------------|----------------------------------------------------------------------------------| |Controller | Folder for foreign related Classes | | > API | proxy functions with Saniticer,Validator and/or Logger | | > Logger | Used ingame Eventlog and Entropy counter | | Entity Manager | Folder with Classes for instanciating,freeing,changing Entities | | IO | Folder With InputClass which connects Signals to API and OutputClass which emits | | System | all kinds of blackbooxed Logical Computation | | Unit Test | Classes for Unit Testing |","title":"moduleStructure"},{"location":"Conventions/moduleStructure/#modules","text":"My Project structure follows an Systemic design pilosophy, its goal is toappend new themes of Features as an Module-folder,which acts like a Blackbox. The only Accespoint is their SIngleton API which saniticies, validates or logs if neccessary. Here are the conversioned Namespaces and their Usage: |Namespace | Usage | |----------------------------|----------------------------------------------------------------------------------| |Controller | Folder for foreign related Classes | | > API | proxy functions with Saniticer,Validator and/or Logger | | > Logger | Used ingame Eventlog and Entropy counter | | Entity Manager | Folder with Classes for instanciating,freeing,changing Entities | | IO | Folder With InputClass which connects Signals to API and OutputClass which emits | | System | all kinds of blackbooxed Logical Computation | | Unit Test | Classes for Unit Testing |","title":"Modules"},{"location":"Entities/Effect/Condition/","text":"WORK IN PROGRESS","title":"ConditionEntity"},{"location":"Entities/Effect/Condition/#work-in-progress","text":"","title":"WORK IN PROGRESS"},{"location":"Entities/Effect/Effect/","text":"WORK IN PROGRESS","title":"EffectEntity"},{"location":"Entities/Effect/Effect/#work-in-progress","text":"","title":"WORK IN PROGRESS"},{"location":"Entities/Kit/Kitpart/","text":"WORK IN PROGRESS","title":"KitPartEntity"},{"location":"Entities/Kit/Kitpart/#work-in-progress","text":"","title":"WORK IN PROGRESS"},{"location":"Entities/Kit/Kitset/","text":"WORK IN PROGRESS","title":"KitSetEntity"},{"location":"Entities/Kit/Kitset/#work-in-progress","text":"","title":"WORK IN PROGRESS"},{"location":"Entities/Tilemap/Actor/","text":"Actors Introduction Those Entities are the important kickstarter for Excitement. Actors are aware beings like humans, but also Animals, Critters, Ghosts or Plants. The big difference to Interactables is,Actors follow a goals, initiate events like shooting, while Interactables stay reactionary. The most important Components are: Component-name Usage hitpoints to check if still alive Procedural Generation Actors are Dynamicaly generated by selecting modules and add their set values to the total of the Entity. There are three types of Categories: Component-name Usage Races Determinds max of Attributes and their Basevalue, also comes with feats Roles Gives a large amount of Skillpoints and some for Attributes Specialties Gives Gear, some little feats and some Skillpoints universal Components The following Components are the lowest common anominator for Tiles. General function Type Usage Notation description String fluff and lore shown in onlook-action recommended length is 40 characters at max textureID String toString() of staticTilesetNR is a convention of 3 fields with \"_\" as IFS: Tileset_Row_Collumn tileName String oneliner reference recommended length is 2 words at max staticTilesetNR Integer index number of corresponding Texture not recommended for freqeunt use. please use textureID for improved readabillity. Synonym String RNG-selected lore name of Race Role Spcialty Spacial function Type Usage Notation type ENUM identifier to differenciate from other entities convention of ENUM.TYPES_ON_MAP.ACTOR isWalkable BOOLEAN Determinds if Actors can stand on Tile mouseHover_quack String duck-typed proxy-function to show on Mousehover pos Vector2 position of Entity on x and y on Tilemap posX and posY can be for single getter. Are Converted from Double to Integer! _005_Character_Stats function Type Usage Notation constitution Integer Health, CarriageCapacity physical reaction Integer physical strength Integer physical agillity Integer physical willpower Integer mental logic Integer mental charisma Integer mental intuition Integer mental indirect _005_Character_Stats function Type Usage Notation carriageCapacity Integer kg of gear actor can carry hitpoints Integer Live of Actor physicalLimit Integer max successes in Dicerole for physical mentalLimit Integer max successes in Dicerole for mental socialLimit Integer max successes in Dicerole for social Quickreferences Keyword Description Races Atlas Determinds max of Attributes and their Basevalue, also comes with feats Roles Atlas Gives a large amount of Skillpoints and some for Attributes Specialties Atlas Gives Gear, some little feats and some Skillpoints Tilemap Layer API to manipulate Tilemap","title":"ActorEntity"},{"location":"Entities/Tilemap/Actor/#actors","text":"","title":"Actors"},{"location":"Entities/Tilemap/Actor/#introduction","text":"Those Entities are the important kickstarter for Excitement. Actors are aware beings like humans, but also Animals, Critters, Ghosts or Plants. The big difference to Interactables is,Actors follow a goals, initiate events like shooting, while Interactables stay reactionary. The most important Components are:","title":"Introduction"},{"location":"Entities/Tilemap/Actor/#procedural-generation","text":"Actors are Dynamicaly generated by selecting modules and add their set values to the total of the Entity. There are three types of Categories:","title":"Procedural Generation"},{"location":"Entities/Tilemap/Actor/#universal-components","text":"The following Components are the lowest common anominator for Tiles.","title":"universal Components"},{"location":"Entities/Tilemap/Actor/#general","text":"","title":"General"},{"location":"Entities/Tilemap/Actor/#spacial","text":"","title":"Spacial"},{"location":"Entities/Tilemap/Actor/#_005_character_stats","text":"","title":"_005_Character_Stats"},{"location":"Entities/Tilemap/Actor/#indirect-_005_character_stats","text":"","title":"indirect _005_Character_Stats"},{"location":"Entities/Tilemap/Actor/#quickreferences","text":"","title":"Quickreferences"},{"location":"Entities/Tilemap/Interact/","text":"Interactables Introduction Those Entities are in between Tiles and Actors. Much like Tiles, they are static and can not change their position on the Tilemap. But they are able to be part of a greater narrative, just like Actors. Actors can usually not walk on Interactables and are reactionary. The most important Components are: Component-name Usage C_67_ANY_POSITION selecting for kits C_2_TEXTURE_ID indexing for Templates C_1_IS_WALKABLE Acessabillity for Actors universal Components The following Components are the lowest common anominator for Tiles. General function Type Usage Notation description String fluff and lore shown in onlook-action recommended length is 40 characters at max textureID String toString() of staticTilesetNR is a convention of 3 fields with \"_\" as IFS: Tileset_Row_Collumn layer Integer name of layer where its mapped convention of ENUM.SOKRATILES_LAYER. X _GROUND X for MEAT MATRIX MAGIC tileName String oneliner reference recommended length is 2 words at max staticTilesetNR Integer index number of corresponding Texture not recommended for freqeunt use. please use textureID for improved readabillity. Spacial function Type Usage Notation type ENUM identifier to differenciate from other entities convention of ENUM.TYPES_ON_MAP.TILE isWalkable BOOLEAN Determinds if Actors can stand on Tile mouseHover_quack String duck-typed proxy-function to show on Mousehover pos Vector2 position of Entity on x and y on Tilemap posX and posY can be for single getter. Are Converted from Double to Integer! Influencial function Type Usage Notation matrixNoise Integer negative modifier for sourrunding Electronics WIP magicNoise Integer negative modifier for sourrunding Magics WIP Quickreferences Keyword Description Tile Atlas All Tiles and their Attributes Texture Atlas All Tiles and their Attributes Apply Conditions Types of triggers to attach Conditions on Tiles Tilemap Layer functions to manipulate Tilemaps","title":"InteractableEntity"},{"location":"Entities/Tilemap/Interact/#interactables","text":"","title":"Interactables"},{"location":"Entities/Tilemap/Interact/#introduction","text":"Those Entities are in between Tiles and Actors. Much like Tiles, they are static and can not change their position on the Tilemap. But they are able to be part of a greater narrative, just like Actors. Actors can usually not walk on Interactables and are reactionary. The most important Components are:","title":"Introduction"},{"location":"Entities/Tilemap/Interact/#universal-components","text":"The following Components are the lowest common anominator for Tiles.","title":"universal Components"},{"location":"Entities/Tilemap/Interact/#general","text":"","title":"General"},{"location":"Entities/Tilemap/Interact/#spacial","text":"","title":"Spacial"},{"location":"Entities/Tilemap/Interact/#influencial","text":"","title":"Influencial"},{"location":"Entities/Tilemap/Interact/#quickreferences","text":"","title":"Quickreferences"},{"location":"Entities/Tilemap/Tile/","text":"TileEntity Introduction Those Entities are detrimental for the Gameworld. They are simple enviromental Objects like a patch of grass or concrete, and hold information about the capabillities to interact with them. For example, whether the patch is burnable or not. Important Components Component-name Usage C_67_ANY_POSITION selecting for kits C_2_TEXTURE_ID indexing for Templates C_1_IS_WALKABLE Acessabillity for Actors Common Components by functions The following functions return the values of its corresponding components: Generall function Return type Component Class-name Usage description String C_0_DESCRIPTION Lore for Worldbuilding isWalkable bool C_1_IS_WALKABLE Determinds if an ActorEntity can stand on it textureID String C_2_TEXTURE_ID Readable variant of the staticTilesetNr, set together by an IFS of Tileset_Row_Collumn tileName String C_6_NAME Oneliner reference of max 2 Words layer String C_3_LAYER Convention of ENUM.SOKRATILES.LAYER determining on which layer its percieved toStrings function Return type Component Class-name Usage type String ??? ??? mouseHover_quack String C_6_NAME ducktyped function to show name by hovering the mouse over it Spacial function Return type Component Class-name Usage pos Vector2D Instance-variable for perfomance reason returns a dictionary-like structure with x and y keys and their float values poxX int Instance-variable for perfomance reason place on the X-Axis on the Tilemap posY int Instance-variable for perfomance reason place on the Y-Axis on the Tilemap Tilemap Parse function Return type Component Class-name Usage staticTilesetNr int C_7_STATIC_TILESET_NR Number of the Texture in the Tileset Atlas matrixNoise int C_5_MATRIX_NOISE WIP magicNoise int C_4_MAGIC_NOISE WIP Quickreferences Keyword Description Tile Atlas All Tiles and their Attributes Texture Atlas All Tiles and their Attributes Apply Conditions Types of triggers to attach Conditions on Tiles Tilemap Layer functions to manipulate Tilemaps","title":"TileEntity"},{"location":"Entities/Tilemap/Tile/#tileentity","text":"","title":"TileEntity"},{"location":"Entities/Tilemap/Tile/#introduction","text":"Those Entities are detrimental for the Gameworld. They are simple enviromental Objects like a patch of grass or concrete, and hold information about the capabillities to interact with them. For example, whether the patch is burnable or not.","title":"Introduction"},{"location":"Entities/Tilemap/Tile/#important-components","text":"","title":"Important Components"},{"location":"Entities/Tilemap/Tile/#common-components-by-functions","text":"The following functions return the values of its corresponding components:","title":"Common Components by functions"},{"location":"Entities/Tilemap/Tile/#generall","text":"","title":"Generall"},{"location":"Entities/Tilemap/Tile/#tostrings","text":"","title":"toStrings"},{"location":"Entities/Tilemap/Tile/#spacial","text":"","title":"Spacial"},{"location":"Entities/Tilemap/Tile/#tilemap-parse","text":"","title":"Tilemap Parse"},{"location":"Entities/Tilemap/Tile/#quickreferences","text":"","title":"Quickreferences"},{"location":"Modules/001/","text":"001 - Atlas Summary This module is a collection of all entities which have been parsed by Alecandria at the start-up of the game. Every type of entity has its own system which collects them in dictionary with the value of C_12_ATLAS_INDEX as its key. API All functions of this API are getter of some sort. diamonds ( < x : y > ) in a notation describes the key-vlaue-pair. Tiles function Return Type Notation TileAtlas() Dictionary < C_2_TEXTURE_ID : TileEntity> TileSetAtlas() Dictionary < tilesetName : < C_2_TEXTURE_ID : TileEntities > > getTileByTextureID(String) TileEntity 1st Parameter : C_2_TEXTURE_ID KitParts function Return Type Notation getKitGroup(String) Dictionary 1st Parameter of convention ENUM.KIT_CATEGORY. X getKitByDrirectName(String) KitPartEntity 1st Parameter : C_6_NAME Actor Attributes function Return Type Notation RoleAtlas() Dictionary < C_2_TEXTURE_ID : TileEntity> RacesAtlas() Dictionary < C_2_TEXTURE_ID : TileEntity> RacesAtlas() Dictionary < C_2_TEXTURE_ID : TileEntity> Systems System-name Notations Tiles Interactables KitParts Roles Races Specialties Manager","title":"017_Atlas"},{"location":"Modules/001/#001-atlas","text":"","title":"001 - Atlas"},{"location":"Modules/001/#summary","text":"This module is a collection of all entities which have been parsed by Alecandria at the start-up of the game. Every type of entity has its own system which collects them in dictionary with the value of C_12_ATLAS_INDEX as its key.","title":"Summary"},{"location":"Modules/001/#api","text":"All functions of this API are getter of some sort. diamonds ( < x : y > ) in a notation describes the key-vlaue-pair.","title":"API"},{"location":"Modules/001/#tiles","text":"","title":"Tiles"},{"location":"Modules/001/#kitparts","text":"","title":"KitParts"},{"location":"Modules/001/#actor-attributes","text":"","title":"Actor Attributes"},{"location":"Modules/001/#systems","text":"","title":"Systems"},{"location":"Modules/001/#manager","text":"","title":"Manager"},{"location":"Modules/002/","text":"002 - Tilemap_Structure Summary This module manages the manipulation of the tilemaps like adding, removing or changing of entities according to its layers API Rendering function Return Type Notation appendDirtyTiles(TileEntity) void adds TileEntity to the list of which Textures gets updated next round updateDirtyTiles() void renders all TileEntities in List,is also tirggered every round Selection function Return Type Notation getTilemapLayerByEntity( any Entity-Child ) Parameter-dependant Returns the Apropriate Tilemap-Node of Parameter Manipulation function Return Type Notation replaceEntOnPos( any Entity-Child ,Vector2) void < C_2_TEXTURE_ID : TileEntity> interpreteTile(Vector2,TilemapNode) void < C_2_TEXTURE_ID : TileEntity> Systems System-name Notations Animation Conditions Selection Actors NPC Player Meat-space Tile Interactable Matrix-space Tile Interactable Magic-space Tile Interactable Manager","title":"002 - Tilemap_Structure"},{"location":"Modules/002/#002-tilemap_structure","text":"","title":"002 - Tilemap_Structure"},{"location":"Modules/002/#summary","text":"This module manages the manipulation of the tilemaps like adding, removing or changing of entities according to its layers","title":"Summary"},{"location":"Modules/002/#api","text":"","title":"API"},{"location":"Modules/002/#rendering","text":"","title":"Rendering"},{"location":"Modules/002/#selection","text":"","title":"Selection"},{"location":"Modules/002/#manipulation","text":"","title":"Manipulation"},{"location":"Modules/002/#systems","text":"","title":"Systems"},{"location":"Modules/002/#manager","text":"","title":"Manager"},{"location":"Modules/003/","text":"003 - Entropy Still Work in Progress Summary function Return Type Notation function Return Type Notation function Return Type Notation Systems System-name Notations Manager","title":"003 - Entropy"},{"location":"Modules/003/#003-entropy","text":"","title":"003 - Entropy"},{"location":"Modules/003/#still-work-in-progress","text":"","title":"Still Work in Progress"},{"location":"Modules/003/#summary","text":"","title":"Summary"},{"location":"Modules/003/#_1","text":"","title":""},{"location":"Modules/003/#_2","text":"","title":""},{"location":"Modules/003/#_3","text":"","title":""},{"location":"Modules/003/#_4","text":"","title":""},{"location":"Modules/003/#systems","text":"","title":"Systems"},{"location":"Modules/003/#manager","text":"","title":"Manager"},{"location":"Modules/004/","text":"004 - Event Summary This module API All functions of this API are getter of some sort. diamonds ( < x : y > ) in a notation describes the key-vlaue-pair. Tiles function Return Type Notation TileAtlas() Dictionary < C_2_TEXTURE_ID : TileEntity> TileSetAtlas() Dictionary < tilesetName : < C_2_TEXTURE_ID : TileEntities > > getTileByTextureID(String) TileEntity 1st Parameter : C_2_TEXTURE_ID KitParts function Return Type Notation getKitGroup(String) Dictionary 1st Parameter of convention ENUM.KIT_CATEGORY. X getKitByDrirectName(String) KitPartEntity 1st Parameter : C_6_NAME Actor Attributes function Return Type Notation RoleAtlas() Dictionary < C_2_TEXTURE_ID : TileEntity> RacesAtlas() Dictionary < C_2_TEXTURE_ID : TileEntity> RacesAtlas() Dictionary < C_2_TEXTURE_ID : TileEntity> Systems System-name Notations Tiles Interactables KitParts Roles Races Specialties Manager","title":"004 - Event"},{"location":"Modules/004/#004-event","text":"","title":"004 - Event"},{"location":"Modules/004/#summary","text":"This module","title":"Summary"},{"location":"Modules/004/#api","text":"All functions of this API are getter of some sort. diamonds ( < x : y > ) in a notation describes the key-vlaue-pair.","title":"API"},{"location":"Modules/004/#tiles","text":"","title":"Tiles"},{"location":"Modules/004/#kitparts","text":"","title":"KitParts"},{"location":"Modules/004/#actor-attributes","text":"","title":"Actor Attributes"},{"location":"Modules/004/#systems","text":"","title":"Systems"},{"location":"Modules/004/#manager","text":"","title":"Manager"},{"location":"Modules/005/","text":"005 - Player Summary This module is for getting and manipulating the data of the current Character on the tilemap like Healthpoints or Kitsets and the data shared between his team like kitparts. Generall Functions Name Return Type Notation getStations() ?????? ?????? getCurrentStationSetter(Integer) ?????? ?????? getSelectedTiles() ?????? ?????? getSelectedTilesComp(Integer) ?????? ?????? resetSelectedTiles() ?????? ?????? appendSelectedTiles(Integer) ?????? ?????? appendSelectedTilesCacheIntoPerma() ?????? ?????? setCurrentCharByDict(Integer) ?????? ?????? generateNewChar(Integer) ?????? ?????? loadChar() ?????? ?????? loadQuickStartChar(Integer) ?????? ?????? setIndirectStats() ?????? ?????? --- ### Systems For readabillity are the many getter nested in proxy-functions, following Functions return their corresponding System: * kitsets * kitparts * skills * attributes * indirects # ### Kitsets-Functions Name Return Type Notation --------------------------------------------- -------------------------- ----------------------------------------------------------------------- getAll() Array returns an array of all KitSetEntities the player is currently able to use getByNr(Integer) KitSetEntity returns KitSetEntity corresponding to its Key-input getByName(String) KitSetEntity returns KitSetEntity corresponding to its C_12_INDEX_NAME remove(KitSetEntity) void removes KitSetEntity of the players Inventory ( DOES NOT DISASSEMBLE TO KITPARTS ) append(KitSetEntity) void removes KitSetEntity of the players Inventory ( DOES NOT REMOVEKITPARTS OF TEAM_SHARED LIST ) # ### Kitparts-Functions Name Return Type Notation --------------------------------------------- -------------------------- ----------------------------------------------------------------------- getAll() Array returns an array of all KitPartEntities the player is currently able to use getByNr(Integer) KitPartEntity returns KitPartEntity corresponding to its Key-input getByName(String) KitPartEntity returns KitPartEntity corresponding to its C_12_INDEX_NAME remove(KitPartEntity) void removes KitPartEntity of the players Inventory ( DOES NOT DISASSEMBLE TO KITPARTS ) append(KitPartEntity) void removes KitPartEntity of the players Inventory ( DOES NOT REMOVEKITPARTS OF TEAM_SHARED LIST ) # ### Skills-Functions Name Return Type Notation --------------------------------------------- -------------------------- ----------------------------------------------------------------------- crafting() Integer returns the current competence in this Skill phylosophicing() Integer returns the current competence in this Skill conceptualication() Integer returns the current competence in this Skill percieving() Integer returns the current competence in this Skill assensing() Integer returns the current competence in this Skill debugging() Integer returns the current competence in this Skill enduring() Integer returns the current competence in this Skill coping() Integer returns the current competence in this Skill filtering() Integer returns the current competence in this Skill sneaking() Integer returns the current competence in this Skill repressing() Integer returns the current competence in this Skill silencing() Integer returns the current competence in this Skill # ### Attributes-Functions Name Return Type Notation --------------------------------------------- -------------------------- ----------------------------------------------------------------------- logic() Integer returns the current competence in this attribute agillity() Integer returns the current competence in this attribute reaction() Integer returns the current competence in this attribute constitution() Integer returns the current competence in this attribute strength() Integer returns the current competence in this attribute intuition() Integer returns the current competence in this attribute charisma() Integer returns the current competence in this attribute willpower() Integer returns the current competence in this attribute # ### Indirects-Functions Name Return Type Notation --------------------------------------------- -------------------------- ----------------------------------------------------------------------- maxKitSlots() Integer returns the current competence in this calculated value hitpoints() Integer returns the current competence in this calculated value carriageCapacity() Integer returns the current competence in this calculated value mentalLimit() Integer returns the current competence in this calculated value physicalLimit() Integer returns the current competence in this calculated value socialLimit() Integer returns the current competence in this calculated value","title":"005 - Player"},{"location":"Modules/005/#005-player","text":"","title":"005 - Player"},{"location":"Modules/005/#summary","text":"This module is for getting and manipulating the data of the current Character on the tilemap like Healthpoints or Kitsets and the data shared between his team like kitparts.","title":"Summary"},{"location":"Modules/005/#generall-functions","text":"","title":"Generall Functions"},{"location":"Modules/006/","text":"006 - Condition Summary This module manages the attachment of conditions by trimming the instruction to its relevant parts, connecting it to the Signal and saves its reference in the entites dictOfConds. It also holds the Collection of the procedures the effects are going to trigger, they are static functions. Generall Functions Name Return Type Notation attachConditionToEnt(Entity,condIndexString,duration,level) void ?????? getAllConditions() Dictionary returns the Dictionary of all known conditions with their indexString as key getConditionByName(condIndexString) ?????? returns the class with the corresponding procedure","title":"006 - Condition"},{"location":"Modules/006/#006-condition","text":"","title":"006 - Condition"},{"location":"Modules/006/#summary","text":"This module manages the attachment of conditions by trimming the instruction to its relevant parts, connecting it to the Signal and saves its reference in the entites dictOfConds. It also holds the Collection of the procedures the effects are going to trigger, they are static functions.","title":"Summary"},{"location":"Modules/006/#generall-functions","text":"","title":"Generall Functions"},{"location":"Modules/007/","text":"007 - UniqueStatMods Summary This module holds the Collection of the procedures the customiced/hardocoded events which happen with Entities. Generall Functions Name Return Type Notation hasStatmodInIndex(String) boolean validates if the given String is a keyvalue in the collection manageUniqueStatmod(Entity,statModIndexString,values) Dictionary runs the procedure","title":"007 - UniqueStatMods"},{"location":"Modules/007/#007-uniquestatmods","text":"","title":"007 - UniqueStatMods"},{"location":"Modules/007/#summary","text":"This module holds the Collection of the procedures the customiced/hardocoded events which happen with Entities.","title":"Summary"},{"location":"Modules/007/#generall-functions","text":"","title":"Generall Functions"},{"location":"Modules/008/","text":"001 - Atlas Summary API Systems Manager","title":"001 - Atlas"},{"location":"Modules/008/#001-atlas","text":"","title":"001 - Atlas"},{"location":"Modules/008/#summary","text":"","title":"Summary"},{"location":"Modules/008/#api","text":"","title":"API"},{"location":"Modules/008/#systems","text":"","title":"Systems"},{"location":"Modules/008/#manager","text":"","title":"Manager"},{"location":"Modules/009/","text":"009 - CLI Summary This module holds the Collection of the procedures the customiced/hardocoded events which happen with Entities. Generall Functions Name Return Type Notation processCmd(cmdInput,values) void runs cmd processCmdRaw(cmdInput,values) void runs cmd getSyntax() Dictionary returns all data of all cmds getMetaOfCmd(cmdInputString) Dictionary returns data of cmd of given name","title":"009 - CLI"},{"location":"Modules/009/#009-cli","text":"","title":"009 - CLI"},{"location":"Modules/009/#summary","text":"This module holds the Collection of the procedures the customiced/hardocoded events which happen with Entities.","title":"Summary"},{"location":"Modules/009/#generall-functions","text":"","title":"Generall Functions"},{"location":"Modules/010/","text":"010 - Items","title":"010 - Items"},{"location":"Modules/010/#010-items","text":"","title":"010 - Items"},{"location":"Modules/011/","text":"011 - ProcGen Actor Summary This module randomly generates an Actor by its limits of its Template and can delete it. Generall Functions Name Return Type Notation RNGenerateBasicActor(templateIndexString) Dictionary creates a Dictionary of all needed Infos to instanciate an Actor createActorTemplate(rNGeneratedActorDict) ActorEntity Instanciates an Actor by Dictionary ( must have the content from the return of above ) removeActorFromGame(ActorEntity) void frees ActorEntity when possible","title":"011 - ProcGen Actor"},{"location":"Modules/011/#011-procgen-actor","text":"","title":"011 - ProcGen Actor"},{"location":"Modules/011/#summary","text":"This module randomly generates an Actor by its limits of its Template and can delete it.","title":"Summary"},{"location":"Modules/011/#generall-functions","text":"","title":"Generall Functions"},{"location":"Modules/012/","text":"012 - ProcGen Chunk Summary API Systems Manager","title":"012 - ProcGen Chunk"},{"location":"Modules/012/#012-procgen-chunk","text":"","title":"012 - ProcGen Chunk"},{"location":"Modules/012/#summary","text":"","title":"Summary"},{"location":"Modules/012/#api","text":"","title":"API"},{"location":"Modules/012/#systems","text":"","title":"Systems"},{"location":"Modules/012/#manager","text":"","title":"Manager"},{"location":"Modules/013/","text":"013 - ProcGen Loot Summary API Systems Manager","title":"013 - ProcGen Loot"},{"location":"Modules/013/#013-procgen-loot","text":"","title":"013 - ProcGen Loot"},{"location":"Modules/013/#summary","text":"","title":"Summary"},{"location":"Modules/013/#api","text":"","title":"API"},{"location":"Modules/013/#systems","text":"","title":"Systems"},{"location":"Modules/013/#manager","text":"","title":"Manager"},{"location":"Modules/014/","text":"014 - Behaviour Summary API Systems Manager","title":"014 - Behaviour"},{"location":"Modules/014/#014-behaviour","text":"","title":"014 - Behaviour"},{"location":"Modules/014/#summary","text":"","title":"Summary"},{"location":"Modules/014/#api","text":"","title":"API"},{"location":"Modules/014/#systems","text":"","title":"Systems"},{"location":"Modules/014/#manager","text":"","title":"Manager"},{"location":"Modules/015/","text":"001 - Atlas Summary API Systems Manager","title":"001 - Atlas"},{"location":"Modules/015/#001-atlas","text":"","title":"001 - Atlas"},{"location":"Modules/015/#summary","text":"","title":"Summary"},{"location":"Modules/015/#api","text":"","title":"API"},{"location":"Modules/015/#systems","text":"","title":"Systems"},{"location":"Modules/015/#manager","text":"","title":"Manager"},{"location":"Modules/016/","text":"001 - Atlas Summary API Systems Manager","title":"001 - Atlas"},{"location":"Modules/016/#001-atlas","text":"","title":"001 - Atlas"},{"location":"Modules/016/#summary","text":"","title":"Summary"},{"location":"Modules/016/#api","text":"","title":"API"},{"location":"Modules/016/#systems","text":"","title":"Systems"},{"location":"Modules/016/#manager","text":"","title":"Manager"},{"location":"Syntax/Effect%20Syntax/","text":"Time Slot Key-name Possible Inputs Annotation TIME-0 number as String for rounds of actions SPAWN-Slot TIME-1 number as String for rounds of actions ONSET-Slot TIME-2 number as String for rounds of actions EFFECT-Slot TIME-3 number as String for rounds of actions OFFSET-Slot Trigger Slot Key-name Possible Inputs Annotation BASE \"TILE\" , \"ACTOR\" , \"INTERACT\" , \"INTERACT_ACTOR\" , \"TILE_ACTOR\" , \"TILE_ACTOR\" , \"ACTOR\" describes which type of entities will be selected of the Effect, underscore means both types SPECIFIC vvv narrows down select of the the BASE-type by validating following possibillities: \"BASE\" uses the standard select from base \"HAS_CONDITION\" String of name of Condition-Class \"HAS_STAT\" Array of three with name of ComponentClass,operator and value to validate [\"C_1_IS_WALKABLE\",\"=\",\"true\"] \"HAS_TEXTURE\" String of Component C_2_TEXTURE_ID \"CHANCE\" number from 0 up to 100 for its possibillity to trigger Space Slot Key-name Possible Inputs Annotation REACH String of a number M_TYPE \"MEAT\" , \"MAGIC\" , \"MATRIX\" MEDIUM vvv \"AREA\" Draws a circle around the valid valid entities \"LINEA\" Draws a Cross around the valid entities, one Direction has to be selected \"LINEA_AREA\" follows LINE and when valid trigger is found draws AREA \"SELF\" selects Player-position \"SELECT\" Fetches all entities in a Diamond shape SOURCE vvv \"SELF\" Starts to draw by Player-position Effect Slot Key-name Possible Inputs Annotation CONDITION Array of Condition to set with intensitiy and duration (if needed) [\"Cond_BAN_Electrifying\",\"1\",\"1\"] You can find the Whole Atlas here STAT_MOD You can finde the Whole Atlas here","title":"Effect Syntax"},{"location":"Syntax/Effect%20Syntax/#time-slot","text":"","title":"Time Slot"},{"location":"Syntax/Effect%20Syntax/#trigger-slot","text":"","title":"Trigger Slot"},{"location":"Syntax/Effect%20Syntax/#space-slot","text":"","title":"Space Slot"},{"location":"Syntax/Effect%20Syntax/#effect-slot","text":"","title":"Effect Slot"},{"location":"Syntax/Syntax%20Components/","text":"Effect-Syntax Trigger Specific keyword name unit stat toString inputModule BASE basic Trigger TRIGGER SPECIFIC dont reduces selects any further VOID HAS_STAT compare stat TRIGGER SPECIFIC compare the stat X if its Y than Z COMPARATOR HAS_TEXTURE has texture TRIGGER SPECIFIC if it has the textureID (put together by tileset-name,x,y) TEXTURE IS_DOOR is a door TRIGGER SPECIFIC if it has the flag F_9_IS_DOOR IS_DOOR HAS_FLAG has Flag TRIGGER SPECIFIC validates select if entity has COMP.FLAG VOID HAS_CONDITION has condition TRIGGER SPECIFIC validates select if entity is affected by an Condition CONDITION Space Source keyword name unit stat toString inputModule SELF self SPACE SOURCE source of the effect is the position of the player-character VOID Space Medium keyword name unit stat toString inputModule LINEA linea SPACE MEDIUM draws a cross at soruce in all four direction,a directional input set the final select on the appropiated line VOID SELECT advanced search SPACE MEDIUM selects every entity seen on screen (Tiles,Statics,Actors), specific triggers recommended VOID AREA circle area SPACE MEDIUM draws a Circle at soruce VOID LINEA linea SPACE MEDIUM draws a cross at soruce in all four direction,a directional input set the final select on the appropiated line VOID","title":"Effect-Syntax"},{"location":"Syntax/Syntax%20Components/#effect-syntax","text":"","title":"Effect-Syntax"},{"location":"Syntax/Syntax%20Components/#trigger-specific","text":"keyword name unit stat toString inputModule BASE basic Trigger TRIGGER SPECIFIC dont reduces selects any further VOID HAS_STAT compare stat TRIGGER SPECIFIC compare the stat X if its Y than Z COMPARATOR HAS_TEXTURE has texture TRIGGER SPECIFIC if it has the textureID (put together by tileset-name,x,y) TEXTURE IS_DOOR is a door TRIGGER SPECIFIC if it has the flag F_9_IS_DOOR IS_DOOR HAS_FLAG has Flag TRIGGER SPECIFIC validates select if entity has COMP.FLAG VOID HAS_CONDITION has condition TRIGGER SPECIFIC validates select if entity is affected by an Condition CONDITION","title":"Trigger Specific"},{"location":"Syntax/Syntax%20Components/#space-source","text":"keyword name unit stat toString inputModule SELF self SPACE SOURCE source of the effect is the position of the player-character VOID","title":"Space Source"},{"location":"Syntax/Syntax%20Components/#space-medium","text":"keyword name unit stat toString inputModule LINEA linea SPACE MEDIUM draws a cross at soruce in all four direction,a directional input set the final select on the appropiated line VOID SELECT advanced search SPACE MEDIUM selects every entity seen on screen (Tiles,Statics,Actors), specific triggers recommended VOID AREA circle area SPACE MEDIUM draws a Circle at soruce VOID LINEA linea SPACE MEDIUM draws a cross at soruce in all four direction,a directional input set the final select on the appropiated line VOID","title":"Space Medium"},{"location":"Syntax/effectOverview/","text":"JSON Konvention Namings Collumns of EffektEntity (TIME,TRIGGER,SPACE,EFFECT) are called Slots Rows of EffektEntity (like SPAWN,ONSET,HIT,OFFSET) are called Units TIME-Slot N/A -> Not available, will jump to the next Unit of Slots 0 -> Till be triggered at the instant the UserInput is pressed X -> Times of UserInputs before its triggered TRIGGER-Slot BASE -> Necessary field,describes the method of triggering PROJECTILE_HIT -> Effect travels over Tilemap and will be activated by actor or interactable when they match their position SELF -> When being self,almost every time triggering,except if mental stunned TOUCHING -> Effects will be activated by staying next to the wanted posiition and selecting its direction SELECT -> Selects all marked Tiles SPECIFIC -> Further conditions, things in brackets have to be on the right side sepratet with \"_\" BASE -> No further specification HAS_CONDITION(X) -> Name Of Condition it should check before it uses its Condition/statmod on the right side HAS_STAT(X)(y)(z) -> Is triggered when the X stat of target Y-comparator is true to Z CHANCE(X) -> Can only be used after another Unit of Slots and will trigger by X percent TILE_WHEN_REACHED SPACE-Slot MEDIUM -> Way of travel to the target LINEA -> From SOURCE to Crosshair-select AREA -> From SOURCE to Area-select LINEA_AREA -> From SOURCE to Crosshair-select and from there Area-select, separated by \"_\" SELECT -> needs TRIGGER-SPECIFIC , selects everything that HAS_X SELF -> to Player TARGET -> to last selected target SOURCE -> Starting Position on Tilemap SELF -> starts at player and counts from there LAST_HIT -> starts from hit of the Last Slot TARGET -> to last selected target LAST_TARGET-> starts from target of Last Slot,regardless of SPECIFIC was met REACH -> X on the right side for number of Tiles it travels M_TYPE -> Layer of map for Target-selection MEAT -> MAGIC -> MATRIX -> EFFECT-Slot [CONDITION] -> Is an empty List,needs following 3 decriptors per entry condition name -> Unique Identifier intensity -> Factor of effect,when its static,insert a 0 duration -> Length of Effect in UserInputs [STAT_MOD] -> Is an empty List,needs 2 descriptors per entry statistic name -> Unique Identifier modifier -> Will be inserted as addition","title":"effectOverview"},{"location":"Syntax/effectOverview/#json-konvention","text":"","title":"JSON Konvention"},{"location":"Syntax/effectOverview/#namings","text":"Collumns of EffektEntity (TIME,TRIGGER,SPACE,EFFECT) are called Slots Rows of EffektEntity (like SPAWN,ONSET,HIT,OFFSET) are called Units","title":"Namings"},{"location":"Syntax/effectOverview/#time-slot","text":"N/A -> Not available, will jump to the next Unit of Slots 0 -> Till be triggered at the instant the UserInput is pressed X -> Times of UserInputs before its triggered","title":"TIME-Slot"},{"location":"Syntax/effectOverview/#trigger-slot","text":"BASE -> Necessary field,describes the method of triggering PROJECTILE_HIT -> Effect travels over Tilemap and will be activated by actor or interactable when they match their position SELF -> When being self,almost every time triggering,except if mental stunned TOUCHING -> Effects will be activated by staying next to the wanted posiition and selecting its direction SELECT -> Selects all marked Tiles SPECIFIC -> Further conditions, things in brackets have to be on the right side sepratet with \"_\" BASE -> No further specification HAS_CONDITION(X) -> Name Of Condition it should check before it uses its Condition/statmod on the right side HAS_STAT(X)(y)(z) -> Is triggered when the X stat of target Y-comparator is true to Z CHANCE(X) -> Can only be used after another Unit of Slots and will trigger by X percent TILE_WHEN_REACHED","title":"TRIGGER-Slot"},{"location":"Syntax/effectOverview/#space-slot","text":"MEDIUM -> Way of travel to the target LINEA -> From SOURCE to Crosshair-select AREA -> From SOURCE to Area-select LINEA_AREA -> From SOURCE to Crosshair-select and from there Area-select, separated by \"_\" SELECT -> needs TRIGGER-SPECIFIC , selects everything that HAS_X SELF -> to Player TARGET -> to last selected target SOURCE -> Starting Position on Tilemap SELF -> starts at player and counts from there LAST_HIT -> starts from hit of the Last Slot TARGET -> to last selected target LAST_TARGET-> starts from target of Last Slot,regardless of SPECIFIC was met REACH -> X on the right side for number of Tiles it travels M_TYPE -> Layer of map for Target-selection MEAT -> MAGIC -> MATRIX ->","title":"SPACE-Slot"},{"location":"Syntax/effectOverview/#effect-slot","text":"[CONDITION] -> Is an empty List,needs following 3 decriptors per entry condition name -> Unique Identifier intensity -> Factor of effect,when its static,insert a 0 duration -> Length of Effect in UserInputs [STAT_MOD] -> Is an empty List,needs 2 descriptors per entry statistic name -> Unique Identifier modifier -> Will be inserted as addition","title":"EFFECT-Slot"},{"location":"Syntax/lootTables/","text":"Keyword kitpart credits item Kitpart Keyword Usage Mandatory possible Inputs KITPART_TYPE X BASE,MOD,APPENDIX M_TYPE X MAGIC,MEAT,MATRIX relevance X NEW,IMPROVING KIT_CAT X GUN,MEELE,CYBERWARE,HACK,INFUSION,SPELL","title":"lootTables"},{"location":"Syntax/lootTables/#keyword","text":"kitpart credits item","title":"Keyword"},{"location":"Syntax/lootTables/#kitpart","text":"Keyword Usage Mandatory possible Inputs KITPART_TYPE X BASE,MOD,APPENDIX M_TYPE X MAGIC,MEAT,MATRIX relevance X NEW,IMPROVING KIT_CAT X GUN,MEELE,CYBERWARE,HACK,INFUSION,SPELL","title":"Kitpart"}]}